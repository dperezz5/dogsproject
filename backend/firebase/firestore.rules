rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Users collection rules - Simplified for troubleshooting
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(userId);
    }
    
    // Dog Profiles collection rules
    match /dogProfiles/{profileId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        resource.data.ownerId == request.auth.uid;
    }
    
    // Swipes collection rules
    match /swipes/{swipeId} {
      allow read: if isAuthenticated() && 
        (resource.data.swiperId == request.auth.uid);
      allow create: if isAuthenticated() && 
        request.resource.data.swiperId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.swiperId == request.auth.uid;
    }
    
    // Matches collection rules
    match /matches/{matchId} {
      allow read: if isAuthenticated() && 
        (resource.data.userId1 == request.auth.uid || 
         resource.data.userId2 == request.auth.uid);
      allow create: if isAuthenticated();
      allow delete: if isAuthenticated() && 
        (resource.data.userId1 == request.auth.uid || 
         resource.data.userId2 == request.auth.uid);
    }
    
    // Reviews collection rules
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.reviewerId == request.auth.uid;
    }
  }
} 